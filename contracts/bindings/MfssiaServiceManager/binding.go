// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractMfssiaServiceManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// IBLSSignatureCheckerNonSignerStakesAndSignature is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerNonSignerStakesAndSignature struct {
	NonSignerQuorumBitmapIndices []uint32
	NonSignerPubkeys             []BN254G1Point
	QuorumApks                   []BN254G1Point
	ApkG2                        BN254G2Point
	Sigma                        BN254G1Point
	QuorumApkIndices             []uint32
	TotalStakeIndices            []uint32
	NonSignerStakeIndices        [][]uint32
}

// IBLSSignatureCheckerQuorumStakeTotals is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerQuorumStakeTotals struct {
	SignedStakeForQuorum []*big.Int
	TotalStakeForQuorum  []*big.Int
}

// ContractMfssiaServiceManagerMetaData contains all meta data concerning the ContractMfssiaServiceManager contract.
var ContractMfssiaServiceManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_registryCoordinator\",\"type\":\"address\",\"internalType\":\"contractIBLSRegistryCoordinatorWithIndices\"},{\"name\":\"_slasher\",\"type\":\"address\",\"internalType\":\"contractISlasher\"},{\"name\":\"_mfssiaTaskManager\",\"type\":\"address\",\"internalType\":\"contractIMfssiaTaskManager\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"blsPubkeyRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIBLSPubkeyRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"checkSignatures\",\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"referenceBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nonSignerStakesAndSignature\",\"type\":\"tuple\",\"internalType\":\"structIBLSSignatureChecker.NonSignerStakesAndSignature\",\"components\":[{\"name\":\"nonSignerQuorumBitmapIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerPubkeys\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApks\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApkIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"totalStakeIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerStakeIndices\",\"type\":\"uint32[][]\",\"internalType\":\"uint32[][]\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIBLSSignatureChecker.QuorumStakeTotals\",\"components\":[{\"name\":\"signedStakeForQuorum\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"},{\"name\":\"totalStakeForQuorum\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"}]},{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"freezeOperator\",\"inputs\":[{\"name\":\"operatorAddr\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_pauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"initialOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"mfssiaTaskManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIMfssiaTaskManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"pauseAll\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pauserRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registryCoordinator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIRegistryCoordinator\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPauserRegistry\",\"inputs\":[{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"slasher\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractISlasher\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"stakeRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStakeRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"trySignatureAndApkVerification\",\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"apk\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"pairingSuccessful\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"siganatureIsValid\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PauserRegistrySet\",\"inputs\":[{\"name\":\"pauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false}]",
	Bin: "0x6101206040523480156200001257600080fd5b5060405162002ee338038062002ee3833981016040819052620000359162000246565b828281806001600160a01b03166080816001600160a01b031681525050806001600160a01b031663683048356040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000091573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b791906200029a565b6001600160a01b031660a0816001600160a01b031681525050806001600160a01b0316633561deb16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200010f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013591906200029a565b6001600160a01b0390811660c052821660e05250620001536200016b565b50506001600160a01b03166101005250620002c19050565b600054610100900460ff1615620001d85760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156200022b576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200024357600080fd5b50565b6000806000606084860312156200025c57600080fd5b835162000269816200022d565b60208501519093506200027c816200022d565b60408501519092506200028f816200022d565b809150509250925092565b600060208284031215620002ad57600080fd5b8151620002ba816200022d565b9392505050565b60805160a05160c05160e05161010051612bba62000329600039600081816102c501526106c4015260006102ec015260008181610182015261096a01526000818161023301528181610f78015261111901526000818161025a0152610dcc0152612bba6000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806368304835116100ad5780638da5cb5b116100715780638da5cb5b146102b8578063a9fefd40146102c0578063b1344271146102e7578063f2fde38b1461030e578063fabc1cbc1461032157600080fd5b8063683048351461022e5780636d14a987146102555780636efb46361461027c578063715018a61461029d578063886f1195146102a557600080fd5b806338c8ee64116100f457806338c8ee64146101bc578063485cc955146101cf578063595c6a67146101e25780635ac86ab7146101ea5780635c975abb1461021d57600080fd5b806310d67a2f14610126578063136439dd1461013b578063171f1d5b1461014e5780633561deb11461017d575b600080fd5b610139610134366004612252565b610334565b005b610139610149366004612276565b6103f0565b61016161015c3660046123f4565b61052f565b6040805192151583529015156020830152015b60405180910390f35b6101a47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610174565b6101396101ca366004612252565b6106b9565b6101396101dd366004612445565b61074d565b61013961086c565b61020d6101f836600461247e565b606654600160ff9092169190911b9081161490565b6040519015158152602001610174565b606654604051908152602001610174565b6101a47f000000000000000000000000000000000000000000000000000000000000000081565b6101a47f000000000000000000000000000000000000000000000000000000000000000081565b61028f61028a366004612757565b610933565b60405161017492919061284a565b6101396113ac565b6065546101a4906001600160a01b031681565b6101a46113c0565b6101a47f000000000000000000000000000000000000000000000000000000000000000081565b6101a47f000000000000000000000000000000000000000000000000000000000000000081565b61013961031c366004612252565b6113d9565b61013961032f366004612276565b61144f565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ab9190612893565b6001600160a01b0316336001600160a01b0316146103e45760405162461bcd60e51b81526004016103db906128b0565b60405180910390fd5b6103ed816115ab565b50565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa158015610438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045c91906128fa565b6104785760405162461bcd60e51b81526004016103db9061291c565b606654818116146104f15760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c697479000000000000000060648201526084016103db565b606681905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b60008060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018787600001518860200151886000015160006002811061057757610577612964565b60200201518951600160200201518a6020015160006002811061059c5761059c612964565b60200201518b602001516001600281106105b8576105b8612964565b602090810291909101518c518d8301516040516106159a99989796959401988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b6040516020818303038152906040528051906020012060001c610638919061297a565b90506106ab61065161064a88846116a2565b8690611739565b6106596117cd565b6106a16106928561068c604080518082018252600080825260209182015281518083019092526001825260029082015290565b906116a2565b61069b8c61188d565b90611739565b886201d4c061191d565b909890975095505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103ed5760405162461bcd60e51b815260206004820152603360248201527f6f6e6c794d66737369615461736b4d616e616765723a206e6f742066726f6d2060448201527236b339b9b4b0903a30b9b59036b0b730b3b2b960691b60648201526084016103db565b600054610100900460ff161580801561076d5750600054600160ff909116105b806107875750303b158015610787575060005460ff166001145b6107ea5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103db565b6000805460ff19166001179055801561080d576000805461ff0019166101001790555b610818836000611b41565b61082182611c2b565b8015610867576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa1580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d891906128fa565b6108f45760405162461bcd60e51b81526004016103db9061291c565b600019606681905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b60408051808201909152606080825260208201526040805180820190915260008082526020820181905290815b86811015610b5d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c1af6b248989848181106109a9576109a9612964565b9050013560f81c60f81b60f81c888860a0015185815181106109cd576109cd612964565b60209081029190910101516040516001600160e01b031960e086901b16815260ff909316600484015263ffffffff9182166024840152166044820152606401602060405180830381865afa158015610a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4d919061299c565b6001600160401b031916610a7d86604001518381518110610a7057610a70612964565b6020026020010151611c7d565b67ffffffffffffffff191614610b195760405162461bcd60e51b81526020600482015260616024820152600080516020612b6583398151915260448201527f7265733a2071756f72756d41706b206861736820696e2073746f72616765206460648201527f6f6573206e6f74206d617463682070726f76696465642071756f72756d2061706084820152606b60f81b60a482015260c4016103db565b610b4985604001518281518110610b3257610b32612964565b60200260200101518361173990919063ffffffff16565b915080610b55816129dd565b915050610960565b506040805180820190915260608082526020820152866001600160401b03811115610b8a57610b8a61228f565b604051908082528060200260200182016040528015610bb3578160200160208202803683370190505b506020820152866001600160401b03811115610bd157610bd161228f565b604051908082528060200260200182016040528015610bfa578160200160208202803683370190505b5081526020850151516000906001600160401b03811115610c1d57610c1d61228f565b604051908082528060200260200182016040528015610c46578160200160208202803683370190505b50905060008660200151516001600160401b03811115610c6857610c6861228f565b604051908082528060200260200182016040528015610c91578160200160208202803683370190505b5090506000610cd58b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611cc092505050565b905060005b886020015151811015610f4057610d0089602001518281518110610a7057610a70612964565b848281518110610d1257610d12612964565b60209081029190910101528015610dca5783610d2f6001836129f8565b81518110610d3f57610d3f612964565b602002602001015160001c848281518110610d5c57610d5c612964565b602002602001015160001c11610dca576040805162461bcd60e51b8152602060048201526024810191909152600080516020612b6583398151915260448201527f7265733a206e6f6e5369676e65725075626b657973206e6f7420736f7274656460648201526084016103db565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633064620d858381518110610e0b57610e0b612964565b60200260200101518c8c600001518581518110610e2a57610e2a612964565b60200260200101516040518463ffffffff1660e01b8152600401610e679392919092835263ffffffff918216602084015216604082015260600190565b602060405180830381865afa158015610e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea89190612a0f565b6001600160c01b0316838281518110610ec357610ec3612964565b602002602001018181525050610f2c610f25610ef984868581518110610eeb57610eeb612964565b602002602001015116611e29565b610f1f8c602001518581518110610f1257610f12612964565b6020026020010151611e5a565b90611ef5565b8790611739565b955080610f38816129dd565b915050610cda565b505060005b60ff81168a11156112805760008b8b8360ff16818110610f6757610f67612964565b9050013560f81c60f81b60f81c90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c8294c56828c8c60c001518660ff1681518110610fc057610fc0612964565b60209081029190910101516040516001600160e01b031960e086901b16815260ff909316600484015263ffffffff9182166024840152166044820152606401602060405180830381865afa15801561101c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110409190612a38565b85602001518360ff168151811061105957611059612964565b6001600160601b03909216602092830291909101820152850151805160ff841690811061108857611088612964565b602002602001015185600001518360ff16815181106110a9576110a9612964565b60200260200101906001600160601b031690816001600160601b03168152505060005b8960200151518163ffffffff161015611276576000611112858363ffffffff16815181106110fc576110fc612964565b60200260200101518460ff161c60019081161490565b15611263577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a43cde89848e898663ffffffff168151811061116057611160612964565b60200260200101518f60e001518960ff168151811061118157611181612964565b60200260200101518663ffffffff16815181106111a0576111a0612964565b60209081029190910101516040516001600160e01b031960e087901b16815260ff909416600485015263ffffffff92831660248501526044840191909152166064820152608401602060405180830381865afa158015611204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112289190612a38565b8751805160ff871690811061123f5761123f612964565b602002602001018181516112539190612a61565b6001600160601b03169052506001015b508061126e81612a89565b9150506110cc565b5050600101610f45565b50506000806112998c868a606001518b6080015161052f565b915091508161130a5760405162461bcd60e51b81526020600482015260436024820152600080516020612b6583398151915260448201527f7265733a2070616972696e6720707265636f6d70696c652063616c6c206661696064820152621b195960ea1b608482015260a4016103db565b8061136b5760405162461bcd60e51b81526020600482015260396024820152600080516020612b6583398151915260448201527f7265733a207369676e617475726520697320696e76616c69640000000000000060648201526084016103db565b505060008782604051602001611382929190612aad565b60408051808303601f190181529190528051602090910120929b929a509198505050505050505050565b6113b4611fda565b6113be6000611c2b565b565b60006113d46033546001600160a01b031690565b905090565b6113e1611fda565b6001600160a01b0381166114465760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103db565b6103ed81611c2b565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c69190612893565b6001600160a01b0316336001600160a01b0316146114f65760405162461bcd60e51b81526004016103db906128b0565b6066541981196066541916146115745760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c697479000000000000000060648201526084016103db565b606681905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c90602001610524565b6001600160a01b0381166116395760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a4016103db565b606554604080516001600160a01b03928316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1606580546001600160a01b0319166001600160a01b0392909216919091179055565b60408051808201909152600080825260208201526116be612163565b835181526020808501519082015260408082018490526000908360608460076107d05a03fa90508080156116f1576116f3565bfe5b50806117315760405162461bcd60e51b815260206004820152600d60248201526c1958cb5b5d5b0b59985a5b1959609a1b60448201526064016103db565b505092915050565b6040805180820190915260008082526020820152611755612181565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa90508080156116f15750806117315760405162461bcd60e51b815260206004820152600d60248201526c1958cb5859190b59985a5b1959609a1b60448201526064016103db565b6117d561219f565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60208381019190915281019190915290565b6040805180820190915260008082526020820152600080806118bd600080516020612b458339815191528661297a565b90505b6118c981612039565b9093509150600080516020612b45833981519152828309831415611903576040805180820190915290815260208101919091529392505050565b600080516020612b458339815191526001820890506118c0565b60408051808201825286815260208082018690528251808401909352868352820184905260009182919061194f6121c4565b60005b6002811015611b14576000611968826006612af5565b905084826002811061197c5761197c612964565b6020020151518361198e836000612b14565b600c811061199e5761199e612964565b60200201528482600281106119b5576119b5612964565b602002015160200151838260016119cc9190612b14565b600c81106119dc576119dc612964565b60200201528382600281106119f3576119f3612964565b6020020151515183611a06836002612b14565b600c8110611a1657611a16612964565b6020020152838260028110611a2d57611a2d612964565b6020020151516001602002015183611a46836003612b14565b600c8110611a5657611a56612964565b6020020152838260028110611a6d57611a6d612964565b602002015160200151600060028110611a8857611a88612964565b602002015183611a99836004612b14565b600c8110611aa957611aa9612964565b6020020152838260028110611ac057611ac0612964565b602002015160200151600160028110611adb57611adb612964565b602002015183611aec836005612b14565b600c8110611afc57611afc612964565b60200201525080611b0c816129dd565b915050611952565b50611b1d6121e3565b60006020826101808560088cfa9151919c9115159b50909950505050505050505050565b6065546001600160a01b0316158015611b6257506001600160a01b03821615155b611be45760405162461bcd60e51b815260206004820152604760248201527f5061757361626c652e5f696e697469616c697a655061757365723a205f696e6960448201527f7469616c697a6550617573657228292063616e206f6e6c792062652063616c6c6064820152666564206f6e636560c81b608482015260a4016103db565b606681905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2611c27826115ab565b5050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081600001518260200151604051602001611ca3929190918252602082015260400190565b604051602081830303815290604052805190602001209050919050565b600061010082511115611d345760405162461bcd60e51b815260206004820152603660248201527f4269746d61705574696c732e62797465734172726179546f4269746d61703a206044820152756279746573417272617920697320746f6f206c6f6e6760501b60648201526084016103db565b8151611d4257506000919050565b60008083600081518110611d5857611d58612964565b0160200151600160f89190911c81901b92505b8451811015611e2057848181518110611d8657611d86612964565b0160200151600160f89190911c1b915082821615611e0c5760405162461bcd60e51b815260206004820152603a60248201527f4269746d61705574696c732e62797465734172726179546f4269746d61703a2060448201527f72657065617420656e74727920696e206279746573417272617900000000000060648201526084016103db565b91811791611e19816129dd565b9050611d6b565b50909392505050565b6000805b8215611e5457611e3e6001846129f8565b9092169180611e4c81612b2c565b915050611e2d565b92915050565b60408051808201909152600080825260208201528151158015611e7f57506020820151155b15611e9d575050604080518082019091526000808252602082015290565b604051806040016040528083600001518152602001600080516020612b458339815191528460200151611ed0919061297a565b611ee890600080516020612b458339815191526129f8565b905292915050565b919050565b60408051808201909152600080825260208201526102008261ffff1610611f515760405162461bcd60e51b815260206004820152601060248201526f7363616c61722d746f6f2d6c6172676560801b60448201526064016103db565b8161ffff1660011415611f65575081611e54565b6040805180820190915260008082526020820181905284906001905b8161ffff168661ffff161115611fcf57600161ffff871660ff83161c81161415611fb257611faf8484611739565b93505b611fbc8384611739565b92506201fffe600192831b169101611f81565b509195945050505050565b33611fe36113c0565b6001600160a01b0316146113be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103db565b60008080600080516020612b458339815191526003600080516020612b4583398151915286600080516020612b458339815191528889090908905060006120af827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52600080516020612b458339815191526120bb565b91959194509092505050565b6000806120c66121e3565b6120ce612201565b602080825281810181905260408201819052606082018890526080820187905260a082018690528260c08360056107d05a03fa92508280156116f15750826121585760405162461bcd60e51b815260206004820152601a60248201527f424e3235342e6578704d6f643a2063616c6c206661696c75726500000000000060448201526064016103db565b505195945050505050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806121b261221f565b81526020016121bf61221f565b905290565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6001600160a01b03811681146103ed57600080fd5b60006020828403121561226457600080fd5b813561226f8161223d565b9392505050565b60006020828403121561228857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156122c7576122c761228f565b60405290565b60405161010081016001600160401b03811182821017156122c7576122c761228f565b604051601f8201601f191681016001600160401b03811182821017156123185761231861228f565b604052919050565b60006040828403121561233257600080fd5b61233a6122a5565b9050813581526020820135602082015292915050565b600082601f83011261236157600080fd5b604051604081018181106001600160401b03821117156123835761238361228f565b806040525080604084018581111561239a57600080fd5b845b81811015611fcf57803583526020928301920161239c565b6000608082840312156123c657600080fd5b6123ce6122a5565b90506123da8383612350565b81526123e98360408401612350565b602082015292915050565b600080600080610120858703121561240b57600080fd5b8435935061241c8660208701612320565b925061242b86606087016123b4565b915061243a8660e08701612320565b905092959194509250565b6000806040838503121561245857600080fd5b82356124638161223d565b915060208301356124738161223d565b809150509250929050565b60006020828403121561249057600080fd5b813560ff8116811461226f57600080fd5b803563ffffffff81168114611ef057600080fd5b60006001600160401b038211156124ce576124ce61228f565b5060051b60200190565b600082601f8301126124e957600080fd5b813560206124fe6124f9836124b5565b6122f0565b82815260059290921b8401810191818101908684111561251d57600080fd5b8286015b8481101561253f57612532816124a1565b8352918301918301612521565b509695505050505050565b600082601f83011261255b57600080fd5b8135602061256b6124f9836124b5565b82815260069290921b8401810191818101908684111561258a57600080fd5b8286015b8481101561253f576125a08882612320565b83529183019160400161258e565b600082601f8301126125bf57600080fd5b813560206125cf6124f9836124b5565b82815260059290921b840181019181810190868411156125ee57600080fd5b8286015b8481101561253f5780356001600160401b038111156126115760008081fd5b61261f8986838b01016124d8565b8452509183019183016125f2565b6000610180828403121561264057600080fd5b6126486122cd565b905081356001600160401b038082111561266157600080fd5b61266d858386016124d8565b8352602084013591508082111561268357600080fd5b61268f8583860161254a565b602084015260408401359150808211156126a857600080fd5b6126b48583860161254a565b60408401526126c685606086016123b4565b60608401526126d88560e08601612320565b60808401526101208401359150808211156126f257600080fd5b6126fe858386016124d8565b60a084015261014084013591508082111561271857600080fd5b612724858386016124d8565b60c084015261016084013591508082111561273e57600080fd5b5061274b848285016125ae565b60e08301525092915050565b60008060008060006080868803121561276f57600080fd5b8535945060208601356001600160401b038082111561278d57600080fd5b818801915088601f8301126127a157600080fd5b8135818111156127b057600080fd5b8960208285010111156127c257600080fd5b60208301965094506127d6604089016124a1565b935060608801359150808211156127ec57600080fd5b506127f98882890161262d565b9150509295509295909350565b600081518084526020808501945080840160005b8381101561283f5781516001600160601b03168752958201959082019060010161281a565b509495945050505050565b60408152600083516040808401526128656080840182612806565b90506020850151603f198483030160608501526128828282612806565b925050508260208301529392505050565b6000602082840312156128a557600080fd5b815161226f8161223d565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b606082015260800190565b60006020828403121561290c57600080fd5b8151801515811461226f57600080fd5b60208082526028908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526739903830bab9b2b960c11b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008261299757634e487b7160e01b600052601260045260246000fd5b500690565b6000602082840312156129ae57600080fd5b815167ffffffffffffffff198116811461226f57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156129f1576129f16129c7565b5060010190565b600082821015612a0a57612a0a6129c7565b500390565b600060208284031215612a2157600080fd5b81516001600160c01b038116811461226f57600080fd5b600060208284031215612a4a57600080fd5b81516001600160601b038116811461226f57600080fd5b60006001600160601b0383811690831681811015612a8157612a816129c7565b039392505050565b600063ffffffff80831681811415612aa357612aa36129c7565b6001019392505050565b63ffffffff60e01b8360e01b1681526000600482018351602080860160005b83811015612ae857815185529382019390820190600101612acc565b5092979650505050505050565b6000816000190483118215151615612b0f57612b0f6129c7565b500290565b60008219821115612b2757612b276129c7565b500190565b600061ffff80831681811415612aa357612aa36129c756fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47424c535369676e6174757265436865636b65722e636865636b5369676e617475a2646970667358221220507af10be141c3567ad926dc38039966b3e17580553b4b13aeeb07e666f2d80964736f6c634300080c0033",
}

// ContractMfssiaServiceManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMfssiaServiceManagerMetaData.ABI instead.
var ContractMfssiaServiceManagerABI = ContractMfssiaServiceManagerMetaData.ABI

// ContractMfssiaServiceManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMfssiaServiceManagerMetaData.Bin instead.
var ContractMfssiaServiceManagerBin = ContractMfssiaServiceManagerMetaData.Bin

// DeployContractMfssiaServiceManager deploys a new Ethereum contract, binding an instance of ContractMfssiaServiceManager to it.
func DeployContractMfssiaServiceManager(auth *bind.TransactOpts, backend bind.ContractBackend, _registryCoordinator common.Address, _slasher common.Address, _mfssiaTaskManager common.Address) (common.Address, *types.Transaction, *ContractMfssiaServiceManager, error) {
	parsed, err := ContractMfssiaServiceManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractMfssiaServiceManagerBin), backend, _registryCoordinator, _slasher, _mfssiaTaskManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractMfssiaServiceManager{ContractMfssiaServiceManagerCaller: ContractMfssiaServiceManagerCaller{contract: contract}, ContractMfssiaServiceManagerTransactor: ContractMfssiaServiceManagerTransactor{contract: contract}, ContractMfssiaServiceManagerFilterer: ContractMfssiaServiceManagerFilterer{contract: contract}}, nil
}

// ContractMfssiaServiceManager is an auto generated Go binding around an Ethereum contract.
type ContractMfssiaServiceManager struct {
	ContractMfssiaServiceManagerCaller     // Read-only binding to the contract
	ContractMfssiaServiceManagerTransactor // Write-only binding to the contract
	ContractMfssiaServiceManagerFilterer   // Log filterer for contract events
}

// ContractMfssiaServiceManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractMfssiaServiceManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMfssiaServiceManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractMfssiaServiceManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMfssiaServiceManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractMfssiaServiceManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMfssiaServiceManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractMfssiaServiceManagerSession struct {
	Contract     *ContractMfssiaServiceManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                 // Call options to use throughout this session
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ContractMfssiaServiceManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractMfssiaServiceManagerCallerSession struct {
	Contract *ContractMfssiaServiceManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                       // Call options to use throughout this session
}

// ContractMfssiaServiceManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractMfssiaServiceManagerTransactorSession struct {
	Contract     *ContractMfssiaServiceManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                       // Transaction auth options to use throughout this session
}

// ContractMfssiaServiceManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractMfssiaServiceManagerRaw struct {
	Contract *ContractMfssiaServiceManager // Generic contract binding to access the raw methods on
}

// ContractMfssiaServiceManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractMfssiaServiceManagerCallerRaw struct {
	Contract *ContractMfssiaServiceManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ContractMfssiaServiceManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractMfssiaServiceManagerTransactorRaw struct {
	Contract *ContractMfssiaServiceManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractMfssiaServiceManager creates a new instance of ContractMfssiaServiceManager, bound to a specific deployed contract.
func NewContractMfssiaServiceManager(address common.Address, backend bind.ContractBackend) (*ContractMfssiaServiceManager, error) {
	contract, err := bindContractMfssiaServiceManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractMfssiaServiceManager{ContractMfssiaServiceManagerCaller: ContractMfssiaServiceManagerCaller{contract: contract}, ContractMfssiaServiceManagerTransactor: ContractMfssiaServiceManagerTransactor{contract: contract}, ContractMfssiaServiceManagerFilterer: ContractMfssiaServiceManagerFilterer{contract: contract}}, nil
}

// NewContractMfssiaServiceManagerCaller creates a new read-only instance of ContractMfssiaServiceManager, bound to a specific deployed contract.
func NewContractMfssiaServiceManagerCaller(address common.Address, caller bind.ContractCaller) (*ContractMfssiaServiceManagerCaller, error) {
	contract, err := bindContractMfssiaServiceManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractMfssiaServiceManagerCaller{contract: contract}, nil
}

// NewContractMfssiaServiceManagerTransactor creates a new write-only instance of ContractMfssiaServiceManager, bound to a specific deployed contract.
func NewContractMfssiaServiceManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractMfssiaServiceManagerTransactor, error) {
	contract, err := bindContractMfssiaServiceManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractMfssiaServiceManagerTransactor{contract: contract}, nil
}

// NewContractMfssiaServiceManagerFilterer creates a new log filterer instance of ContractMfssiaServiceManager, bound to a specific deployed contract.
func NewContractMfssiaServiceManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractMfssiaServiceManagerFilterer, error) {
	contract, err := bindContractMfssiaServiceManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractMfssiaServiceManagerFilterer{contract: contract}, nil
}

// bindContractMfssiaServiceManager binds a generic wrapper to an already deployed contract.
func bindContractMfssiaServiceManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMfssiaServiceManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractMfssiaServiceManager.Contract.ContractMfssiaServiceManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.ContractMfssiaServiceManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.ContractMfssiaServiceManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractMfssiaServiceManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.contract.Transact(opts, method, params...)
}

// BlsPubkeyRegistry is a free data retrieval call binding the contract method 0x3561deb1.
//
// Solidity: function blsPubkeyRegistry() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCaller) BlsPubkeyRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMfssiaServiceManager.contract.Call(opts, &out, "blsPubkeyRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlsPubkeyRegistry is a free data retrieval call binding the contract method 0x3561deb1.
//
// Solidity: function blsPubkeyRegistry() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) BlsPubkeyRegistry() (common.Address, error) {
	return _ContractMfssiaServiceManager.Contract.BlsPubkeyRegistry(&_ContractMfssiaServiceManager.CallOpts)
}

// BlsPubkeyRegistry is a free data retrieval call binding the contract method 0x3561deb1.
//
// Solidity: function blsPubkeyRegistry() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCallerSession) BlsPubkeyRegistry() (common.Address, error) {
	return _ContractMfssiaServiceManager.Contract.BlsPubkeyRegistry(&_ContractMfssiaServiceManager.CallOpts)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) view returns((uint96[],uint96[]), bytes32)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCaller) CheckSignatures(opts *bind.CallOpts, msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	var out []interface{}
	err := _ContractMfssiaServiceManager.contract.Call(opts, &out, "checkSignatures", msgHash, quorumNumbers, referenceBlockNumber, nonSignerStakesAndSignature)

	if err != nil {
		return *new(IBLSSignatureCheckerQuorumStakeTotals), *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(IBLSSignatureCheckerQuorumStakeTotals)).(*IBLSSignatureCheckerQuorumStakeTotals)
	out1 := *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return out0, out1, err

}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) view returns((uint96[],uint96[]), bytes32)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractMfssiaServiceManager.Contract.CheckSignatures(&_ContractMfssiaServiceManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, nonSignerStakesAndSignature)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) view returns((uint96[],uint96[]), bytes32)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCallerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractMfssiaServiceManager.Contract.CheckSignatures(&_ContractMfssiaServiceManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, nonSignerStakesAndSignature)
}

// MfssiaTaskManager is a free data retrieval call binding the contract method 0xa9fefd40.
//
// Solidity: function mfssiaTaskManager() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCaller) MfssiaTaskManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMfssiaServiceManager.contract.Call(opts, &out, "mfssiaTaskManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MfssiaTaskManager is a free data retrieval call binding the contract method 0xa9fefd40.
//
// Solidity: function mfssiaTaskManager() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) MfssiaTaskManager() (common.Address, error) {
	return _ContractMfssiaServiceManager.Contract.MfssiaTaskManager(&_ContractMfssiaServiceManager.CallOpts)
}

// MfssiaTaskManager is a free data retrieval call binding the contract method 0xa9fefd40.
//
// Solidity: function mfssiaTaskManager() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCallerSession) MfssiaTaskManager() (common.Address, error) {
	return _ContractMfssiaServiceManager.Contract.MfssiaTaskManager(&_ContractMfssiaServiceManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMfssiaServiceManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) Owner() (common.Address, error) {
	return _ContractMfssiaServiceManager.Contract.Owner(&_ContractMfssiaServiceManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCallerSession) Owner() (common.Address, error) {
	return _ContractMfssiaServiceManager.Contract.Owner(&_ContractMfssiaServiceManager.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCaller) Paused(opts *bind.CallOpts, index uint8) (bool, error) {
	var out []interface{}
	err := _ContractMfssiaServiceManager.contract.Call(opts, &out, "paused", index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) Paused(index uint8) (bool, error) {
	return _ContractMfssiaServiceManager.Contract.Paused(&_ContractMfssiaServiceManager.CallOpts, index)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCallerSession) Paused(index uint8) (bool, error) {
	return _ContractMfssiaServiceManager.Contract.Paused(&_ContractMfssiaServiceManager.CallOpts, index)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCaller) Paused0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractMfssiaServiceManager.contract.Call(opts, &out, "paused0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) Paused0() (*big.Int, error) {
	return _ContractMfssiaServiceManager.Contract.Paused0(&_ContractMfssiaServiceManager.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCallerSession) Paused0() (*big.Int, error) {
	return _ContractMfssiaServiceManager.Contract.Paused0(&_ContractMfssiaServiceManager.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCaller) PauserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMfssiaServiceManager.contract.Call(opts, &out, "pauserRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) PauserRegistry() (common.Address, error) {
	return _ContractMfssiaServiceManager.Contract.PauserRegistry(&_ContractMfssiaServiceManager.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCallerSession) PauserRegistry() (common.Address, error) {
	return _ContractMfssiaServiceManager.Contract.PauserRegistry(&_ContractMfssiaServiceManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCaller) RegistryCoordinator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMfssiaServiceManager.contract.Call(opts, &out, "registryCoordinator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractMfssiaServiceManager.Contract.RegistryCoordinator(&_ContractMfssiaServiceManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCallerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractMfssiaServiceManager.Contract.RegistryCoordinator(&_ContractMfssiaServiceManager.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCaller) Slasher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMfssiaServiceManager.contract.Call(opts, &out, "slasher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) Slasher() (common.Address, error) {
	return _ContractMfssiaServiceManager.Contract.Slasher(&_ContractMfssiaServiceManager.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCallerSession) Slasher() (common.Address, error) {
	return _ContractMfssiaServiceManager.Contract.Slasher(&_ContractMfssiaServiceManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCaller) StakeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMfssiaServiceManager.contract.Call(opts, &out, "stakeRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) StakeRegistry() (common.Address, error) {
	return _ContractMfssiaServiceManager.Contract.StakeRegistry(&_ContractMfssiaServiceManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCallerSession) StakeRegistry() (common.Address, error) {
	return _ContractMfssiaServiceManager.Contract.StakeRegistry(&_ContractMfssiaServiceManager.CallOpts)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCaller) TrySignatureAndApkVerification(opts *bind.CallOpts, msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	var out []interface{}
	err := _ContractMfssiaServiceManager.contract.Call(opts, &out, "trySignatureAndApkVerification", msgHash, apk, apkG2, sigma)

	outstruct := new(struct {
		PairingSuccessful bool
		SiganatureIsValid bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PairingSuccessful = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.SiganatureIsValid = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractMfssiaServiceManager.Contract.TrySignatureAndApkVerification(&_ContractMfssiaServiceManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerCallerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractMfssiaServiceManager.Contract.TrySignatureAndApkVerification(&_ContractMfssiaServiceManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// FreezeOperator is a paid mutator transaction binding the contract method 0x38c8ee64.
//
// Solidity: function freezeOperator(address operatorAddr) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactor) FreezeOperator(opts *bind.TransactOpts, operatorAddr common.Address) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.contract.Transact(opts, "freezeOperator", operatorAddr)
}

// FreezeOperator is a paid mutator transaction binding the contract method 0x38c8ee64.
//
// Solidity: function freezeOperator(address operatorAddr) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) FreezeOperator(operatorAddr common.Address) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.FreezeOperator(&_ContractMfssiaServiceManager.TransactOpts, operatorAddr)
}

// FreezeOperator is a paid mutator transaction binding the contract method 0x38c8ee64.
//
// Solidity: function freezeOperator(address operatorAddr) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactorSession) FreezeOperator(operatorAddr common.Address) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.FreezeOperator(&_ContractMfssiaServiceManager.TransactOpts, operatorAddr)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _pauserRegistry, address initialOwner) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactor) Initialize(opts *bind.TransactOpts, _pauserRegistry common.Address, initialOwner common.Address) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.contract.Transact(opts, "initialize", _pauserRegistry, initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _pauserRegistry, address initialOwner) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) Initialize(_pauserRegistry common.Address, initialOwner common.Address) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.Initialize(&_ContractMfssiaServiceManager.TransactOpts, _pauserRegistry, initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _pauserRegistry, address initialOwner) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactorSession) Initialize(_pauserRegistry common.Address, initialOwner common.Address) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.Initialize(&_ContractMfssiaServiceManager.TransactOpts, _pauserRegistry, initialOwner)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactor) Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.contract.Transact(opts, "pause", newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.Pause(&_ContractMfssiaServiceManager.TransactOpts, newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.Pause(&_ContractMfssiaServiceManager.TransactOpts, newPausedStatus)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactor) PauseAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.contract.Transact(opts, "pauseAll")
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) PauseAll() (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.PauseAll(&_ContractMfssiaServiceManager.TransactOpts)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactorSession) PauseAll() (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.PauseAll(&_ContractMfssiaServiceManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.RenounceOwnership(&_ContractMfssiaServiceManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.RenounceOwnership(&_ContractMfssiaServiceManager.TransactOpts)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactor) SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.contract.Transact(opts, "setPauserRegistry", newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.SetPauserRegistry(&_ContractMfssiaServiceManager.TransactOpts, newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactorSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.SetPauserRegistry(&_ContractMfssiaServiceManager.TransactOpts, newPauserRegistry)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.TransferOwnership(&_ContractMfssiaServiceManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.TransferOwnership(&_ContractMfssiaServiceManager.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactor) Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.contract.Transact(opts, "unpause", newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.Unpause(&_ContractMfssiaServiceManager.TransactOpts, newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerTransactorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMfssiaServiceManager.Contract.Unpause(&_ContractMfssiaServiceManager.TransactOpts, newPausedStatus)
}

// ContractMfssiaServiceManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractMfssiaServiceManager contract.
type ContractMfssiaServiceManagerInitializedIterator struct {
	Event *ContractMfssiaServiceManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMfssiaServiceManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMfssiaServiceManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMfssiaServiceManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMfssiaServiceManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMfssiaServiceManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMfssiaServiceManagerInitialized represents a Initialized event raised by the ContractMfssiaServiceManager contract.
type ContractMfssiaServiceManagerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractMfssiaServiceManagerInitializedIterator, error) {

	logs, sub, err := _ContractMfssiaServiceManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractMfssiaServiceManagerInitializedIterator{contract: _ContractMfssiaServiceManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractMfssiaServiceManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractMfssiaServiceManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMfssiaServiceManagerInitialized)
				if err := _ContractMfssiaServiceManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerFilterer) ParseInitialized(log types.Log) (*ContractMfssiaServiceManagerInitialized, error) {
	event := new(ContractMfssiaServiceManagerInitialized)
	if err := _ContractMfssiaServiceManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMfssiaServiceManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractMfssiaServiceManager contract.
type ContractMfssiaServiceManagerOwnershipTransferredIterator struct {
	Event *ContractMfssiaServiceManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMfssiaServiceManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMfssiaServiceManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMfssiaServiceManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMfssiaServiceManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMfssiaServiceManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMfssiaServiceManagerOwnershipTransferred represents a OwnershipTransferred event raised by the ContractMfssiaServiceManager contract.
type ContractMfssiaServiceManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractMfssiaServiceManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractMfssiaServiceManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractMfssiaServiceManagerOwnershipTransferredIterator{contract: _ContractMfssiaServiceManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractMfssiaServiceManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractMfssiaServiceManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMfssiaServiceManagerOwnershipTransferred)
				if err := _ContractMfssiaServiceManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerFilterer) ParseOwnershipTransferred(log types.Log) (*ContractMfssiaServiceManagerOwnershipTransferred, error) {
	event := new(ContractMfssiaServiceManagerOwnershipTransferred)
	if err := _ContractMfssiaServiceManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMfssiaServiceManagerPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ContractMfssiaServiceManager contract.
type ContractMfssiaServiceManagerPausedIterator struct {
	Event *ContractMfssiaServiceManagerPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMfssiaServiceManagerPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMfssiaServiceManagerPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMfssiaServiceManagerPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMfssiaServiceManagerPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMfssiaServiceManagerPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMfssiaServiceManagerPaused represents a Paused event raised by the ContractMfssiaServiceManager contract.
type ContractMfssiaServiceManagerPaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ContractMfssiaServiceManagerPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractMfssiaServiceManager.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractMfssiaServiceManagerPausedIterator{contract: _ContractMfssiaServiceManager.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractMfssiaServiceManagerPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractMfssiaServiceManager.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMfssiaServiceManagerPaused)
				if err := _ContractMfssiaServiceManager.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerFilterer) ParsePaused(log types.Log) (*ContractMfssiaServiceManagerPaused, error) {
	event := new(ContractMfssiaServiceManagerPaused)
	if err := _ContractMfssiaServiceManager.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMfssiaServiceManagerPauserRegistrySetIterator is returned from FilterPauserRegistrySet and is used to iterate over the raw logs and unpacked data for PauserRegistrySet events raised by the ContractMfssiaServiceManager contract.
type ContractMfssiaServiceManagerPauserRegistrySetIterator struct {
	Event *ContractMfssiaServiceManagerPauserRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMfssiaServiceManagerPauserRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMfssiaServiceManagerPauserRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMfssiaServiceManagerPauserRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMfssiaServiceManagerPauserRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMfssiaServiceManagerPauserRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMfssiaServiceManagerPauserRegistrySet represents a PauserRegistrySet event raised by the ContractMfssiaServiceManager contract.
type ContractMfssiaServiceManagerPauserRegistrySet struct {
	PauserRegistry    common.Address
	NewPauserRegistry common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterPauserRegistrySet is a free log retrieval operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerFilterer) FilterPauserRegistrySet(opts *bind.FilterOpts) (*ContractMfssiaServiceManagerPauserRegistrySetIterator, error) {

	logs, sub, err := _ContractMfssiaServiceManager.contract.FilterLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return &ContractMfssiaServiceManagerPauserRegistrySetIterator{contract: _ContractMfssiaServiceManager.contract, event: "PauserRegistrySet", logs: logs, sub: sub}, nil
}

// WatchPauserRegistrySet is a free log subscription operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerFilterer) WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *ContractMfssiaServiceManagerPauserRegistrySet) (event.Subscription, error) {

	logs, sub, err := _ContractMfssiaServiceManager.contract.WatchLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMfssiaServiceManagerPauserRegistrySet)
				if err := _ContractMfssiaServiceManager.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRegistrySet is a log parse operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerFilterer) ParsePauserRegistrySet(log types.Log) (*ContractMfssiaServiceManagerPauserRegistrySet, error) {
	event := new(ContractMfssiaServiceManagerPauserRegistrySet)
	if err := _ContractMfssiaServiceManager.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMfssiaServiceManagerUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ContractMfssiaServiceManager contract.
type ContractMfssiaServiceManagerUnpausedIterator struct {
	Event *ContractMfssiaServiceManagerUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMfssiaServiceManagerUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMfssiaServiceManagerUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMfssiaServiceManagerUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMfssiaServiceManagerUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMfssiaServiceManagerUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMfssiaServiceManagerUnpaused represents a Unpaused event raised by the ContractMfssiaServiceManager contract.
type ContractMfssiaServiceManagerUnpaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ContractMfssiaServiceManagerUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractMfssiaServiceManager.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractMfssiaServiceManagerUnpausedIterator{contract: _ContractMfssiaServiceManager.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractMfssiaServiceManagerUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractMfssiaServiceManager.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMfssiaServiceManagerUnpaused)
				if err := _ContractMfssiaServiceManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractMfssiaServiceManager *ContractMfssiaServiceManagerFilterer) ParseUnpaused(log types.Log) (*ContractMfssiaServiceManagerUnpaused, error) {
	event := new(ContractMfssiaServiceManagerUnpaused)
	if err := _ContractMfssiaServiceManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
